const { ipcRenderer, shell } = require("electron");

let isPasswordVisible = false;
let keysTestPassed = false;


function goBack() {
  window.location.href = "settings.html";
}

function togglePasswordVisibility() {
  const secretInput = document.getElementById("apiSecret");
  const toggleBtn = document.querySelector(".toggle-password");

  if (isPasswordVisible) {
    secretInput.type = "password";
    toggleBtn.textContent = "üëÅÔ∏è";
    isPasswordVisible = false;
  } else {
    secretInput.type = "text";
    toggleBtn.textContent = "üôà";
    isPasswordVisible = true;
  }
}

function showStatus(message, type = "info") {
  const statusElement = document.getElementById("statusMessage");
  statusElement.textContent = message;
  statusElement.className = `status-message ${type}`;

  // Auto-hide after 5 seconds for non-error messages
  if (type !== "error") {
    setTimeout(() => {
      statusElement.textContent = "";
      statusElement.className = "status-message";
    }, 5000);
  }
}

function setButtonLoading(buttonId, loading) {
  const button = document.getElementById(buttonId);
  const textSpan = button.querySelector(".btn-text");
  const spinnerSpan = button.querySelector(".btn-spinner");

  if (loading) {
    textSpan.style.display = "none";
    spinnerSpan.style.display = "inline";
    button.disabled = true;
  } else {
    textSpan.style.display = "inline";
    spinnerSpan.style.display = "none";
    button.disabled = false;
  }
}

async function testApiKeys() {
  const apiKey = document.getElementById("apiKey").value.trim();
  const apiSecret = document.getElementById("apiSecret").value.trim();

  if (!apiKey || !apiSecret) {
    showStatus("Please enter both API Key and Secret", "error");
    return;
  }

  setButtonLoading("testBtn", true);
  showStatus("Testing API connection...", "info");

  ipcRenderer.send("test-api-keys", { apiKey, apiSecret });
}

// Replace the existing saveApiKeys function
async function saveApiKeys() {
    const apiKey = document.getElementById('apiKey').value.trim();
    const apiSecret = document.getElementById('apiSecret').value.trim();
    
    if (!apiKey || !apiSecret) {
        showStatus('Please enter both API Key and Secret', 'error');
        return;
    }
    
    // Check if keys have been tested successfully
    if (!keysTestPassed) {
        showStatus('Please test the API keys first before saving', 'error');
        return;
    }
    
    setButtonLoading('saveBtn', true);
    showStatus('Saving API keys...', 'info');
    
    ipcRenderer.send('save-api-keys', { apiKey, apiSecret });
}
function openBinanceAPI() {
  shell.openExternal("https://www.binance.com/en/my/settings/api-management");
}

// Update the DOMContentLoaded listener
document.addEventListener('DOMContentLoaded', () => {
    console.log('API Keys settings loaded');
    
    // Initialize save button as disabled
    const saveBtn = document.getElementById('saveBtn');
    saveBtn.style.opacity = '0.5';
    saveBtn.style.cursor = 'not-allowed';
    
    // Reset test status when form inputs change
    const apiKeyInput = document.getElementById('apiKey');
    const apiSecretInput = document.getElementById('apiSecret');
    
    [apiKeyInput, apiSecretInput].forEach(input => {
        input.addEventListener('input', () => {
            keysTestPassed = false;
            saveBtn.style.opacity = '0.5';
            saveBtn.style.cursor = 'not-allowed';
            
            // Clear any existing status messages
            const statusElement = document.getElementById('statusMessage');
            statusElement.textContent = '';
            statusElement.className = 'status-message';
        });
    });
});


// Update the test results listener
ipcRenderer.on('api-keys-tested', (event, result) => {
    setButtonLoading('testBtn', false);
    
    if (result.success) {
        keysTestPassed = true;
        showStatus('‚úÖ API keys are valid and working! You can now save them.', 'success');
        
        // Enable save button visually
        const saveBtn = document.getElementById('saveBtn');
        saveBtn.style.opacity = '1';
        saveBtn.style.cursor = 'pointer';
    } else {
        keysTestPassed = false;
        showStatus(`‚ùå API test failed: ${result.error}`, 'error');
        
        // Disable save button visually
        const saveBtn = document.getElementById('saveBtn');
        saveBtn.style.opacity = '0.5';
        saveBtn.style.cursor = 'not-allowed';
    }
});

// Update the save results listener
ipcRenderer.on('api-keys-saved', (event, result) => {
    setButtonLoading('saveBtn', false);
    
    if (result.success) {
        showStatus('‚úÖ API keys saved successfully!', 'success');
        // Clear the form for security
        setTimeout(() => {
            document.getElementById('apiKey').value = '';
            document.getElementById('apiSecret').value = '';
            keysTestPassed = false; // Reset test status
            
            // Reset save button appearance
            const saveBtn = document.getElementById('saveBtn');
            saveBtn.style.opacity = '0.5';
            saveBtn.style.cursor = 'not-allowed';
        }, 2000);
    } else {
        showStatus(`‚ùå Failed to save: ${result.error}`, 'error');
    }
});
